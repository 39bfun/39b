{
  "name": "Ethereum NFT Project",
  "description": "An Ethereum-specific NFT project template with ERC721 contract and React frontend",
  "structure": {
    "contracts": {
      "NFTCollection.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\ncontract {{CollectionName}} is ERC721Enumerable, Ownable {\n    using Counters for Counters.Counter;\n    Counters.Counter private _tokenIds;\n    \n    string public baseURI;\n    uint256 public maxSupply;\n    uint256 public price;\n    \n    constructor(string memory name, string memory symbol, string memory _baseURI, uint256 _maxSupply, uint256 _price) ERC721(name, symbol) {\n        baseURI = _baseURI;\n        maxSupply = _maxSupply;\n        price = _price;\n    }\n    \n    function mint() public payable returns (uint256) {\n        require(_tokenIds.current() < maxSupply, \"Max supply reached\");\n        require(msg.value >= price, \"Insufficient payment\");\n        \n        _tokenIds.increment();\n        uint256 newItemId = _tokenIds.current();\n        _safeMint(msg.sender, newItemId);\n        \n        return newItemId;\n    }\n    \n    function _baseURI() internal view override returns (string memory) {\n        return baseURI;\n    }\n    \n    function setBaseURI(string memory _newBaseURI) public onlyOwner {\n        baseURI = _newBaseURI;\n    }\n    \n    function withdraw() public onlyOwner {\n        payable(owner()).transfer(address(this).balance);\n    }\n}",
      "NFTMarketplace.sol": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract NFTMarketplace is ReentrancyGuard, Ownable {\n    // NFT Marketplace implementation\n}"
    },
    "frontend": {
      "src": {
        "components": {
          "WalletConnector.jsx": "// Ethereum wallet connector component using ethers.js",
          "NFTCard.jsx": "// NFT card display component",
          "NFTGallery.jsx": "// NFT gallery component",
          "MintForm.jsx": "// NFT minting form"
        },
        "hooks": {
          "useEthereum.js": "// Custom hook for Ethereum interactions",
          "useNFTContract.js": "// Custom hook for NFT contract interactions"
        },
        "pages": {
          "index.js": "// Main page",
          "mint.js": "// NFT minting page",
          "gallery.js": "// NFT gallery page"
        },
        "styles": {
          "globals.css": "/* Global styles */",
          "NFT.module.css": "/* NFT-specific styles */"
        },
        "utils": {
          "ethereum.js": "// Ethereum utility functions",
          "ipfs.js": "// IPFS utility functions",
          "metadata.js": "// NFT metadata utilities"
        }
      },
      "public": {
        "favicon.ico": null,
        "placeholder.png": null
      },
      "assets": {
        "metadata": {
          "metadata-template.json": "{\n  \"name\": \"{{NFTName}} #$ID\",\n  \"description\": \"{{NFTDescription}}\",\n  \"image\": \"ipfs://$HASH/$ID.png\",\n  \"attributes\": []\n}"
        }
      }
    },
    "scripts": {
      "deploy.js": "// Contract deployment script using hardhat",
      "verify.js": "// Contract verification script",
      "upload-metadata.js": "// Script to upload metadata to IPFS"
    },
    "config": {
      ".env.example": "INFURA_API_KEY=\nETHERSCAN_API_KEY=\nPRIVATE_KEY=\nCONTRACT_ADDRESS=\nIPFS_PROJECT_ID=\nIPFS_PROJECT_SECRET=",
      "hardhat.config.js": "// Hardhat configuration file"
    },
    "README.md": "# {{ProjectName}}\n\n{{ProjectDescription}}\n\n## Ethereum NFT Project\n\nThis project contains an ERC721 NFT collection contract and a React frontend for minting and displaying NFTs.\n\n### Prerequisites\n\n- Node.js and npm\n- MetaMask or another Ethereum wallet\n- IPFS account (Pinata, Infura, etc.)\n\n### Installation\n\n```bash\nnpm install\n```\n\n### Deployment\n\n```bash\nnpx hardhat run scripts/deploy.js --network <network>\n```"
  }
}
